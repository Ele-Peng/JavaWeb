package cn.elle.Model.dao;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

import cn.elle.Model.domain.Blah;


public class BlahDao {
private String path = "src/Blah.xml";



public Blah findBlahByUsername(String username){
	//创建解析器
	SAXReader reader = new SAXReader();
	Blah _blah = new Blah();
	Document doc;
	try{
		doc = reader.read(path);
		//获取所有的username
		List<Node> list = doc.selectNodes("//username");
		//遍历list
		for(Node node:list){//node是每一个username
			//得到username是否相同
			String _username = node.getText();
			if(_username.equals(username)){
				//得到username的父节点blah
				Element blah = node.getParent();
				//通过Blah获取date和blabla
				String _date = blah.element("date").getText();
				String _blabla = blah.element("blabla").getText();
				_blah.setUsername(_username);
				_blah.setDate(_date);
				_blah.setBlabla(_blabla);
			}
		}
	}catch(Exception e){
		throw new RuntimeException(e);
	}
return _blah;	
}
public void addBlah(Blah blah){
	//创建解析器
	SAXReader reader = new SAXReader();
	try {
		//得到Document
		Document doc = reader.read(this.path);
		//得到节点
		Element root = doc.getRootElement();
		//通过根节点创建节点
		Element _blah = root.element("blah");
		//为_blahr依次添加username date blabla
		Element _username =_blah.addElement("username");
		Element _date = _blah.addElement("date");
		Element _blabla = _blah.addElement("blabla");
		//在_username _date _blabla上面依次添加值
		_username.setText(blah.getUsername());
		_date.setText(blah.getDate());
		_blabla.setText(blah.getBlabla());
		//回写XML
		OutputFormat format = OutputFormat.createPrettyPrint();
		XMLWriter writer = new XMLWriter(
											new FileOutputStream(this.path),format);
		writer.write(doc);
		writer.close();
		
		} catch (Exception e) {
			throw new RuntimeException(e);
		} 
}
public void deleteBlah(String date){//记住一定是得通过父节点才能去删！！
	//创建解析器
	SAXReader reader = new SAXReader();
	//得到Document
	try {
		//得到Document
		Document doc = reader.read(this.path);
		List<Node> list = doc.selectNodes("//date");
		//遍历list集合
		for(Node node : list){//node是每一个date元素
			//得到date的值
			String _date = node.getText();
			//判断_date的值与传递的date是否相同
			if(_date.equals(date)){
				//得到ele节点
				Element ele = node.getParent();
				//获取ele的父节点
				Element blah = ele.getParent();
				//删除ele
				blah.remove(ele);//记得测试一下是将属性设为null，还是remove属性好
			}
			
		}
		//回写Xml
		OutputFormat format = OutputFormat.createPrettyPrint();
		XMLWriter writer = new XMLWriter(
											new FileOutputStream(this.path),format);
		writer.write(doc);
		writer.close();
	} catch (Exception e) {
		throw new RuntimeException(e);
	} 
	
}
}
